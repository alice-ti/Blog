import{_ as a,c as i,o as e,af as n}from"./chunks/framework.BivmJ8bT.js";const c=JSON.parse('{"title":"全局状态管理","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Vue/02-全局状态管理.md","filePath":"docs/Vue/02-全局状态管理.md","lastUpdated":1748588477000}'),t={name:"docs/Vue/02-全局状态管理.md"};function p(l,s,h,r,o,k){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="全局状态管理" tabindex="-1">全局状态管理 <a class="header-anchor" href="#全局状态管理" aria-label="Permalink to &quot;全局状态管理&quot;">​</a></h1><h2 id="pinia" tabindex="-1">Pinia <a class="header-anchor" href="#pinia" aria-label="Permalink to &quot;Pinia&quot;">​</a></h2><h3 id="下载" tabindex="-1">下载 <a class="header-anchor" href="#下载" aria-label="Permalink to &quot;下载&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 需要 cd 到的项目目录下</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pinia</span></span></code></pre></div><p>查看的 package.json ，看看里面的 <code>dependencies</code> 是否成功加入了 Pinia 和它的版本号（下方是示例代码，以实际安装的最新版本号为准）</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;pinia&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2.0.11&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>打开 <code>src/main.ts</code> 文件，引入 Pinia</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createPinia } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;pinia&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 导入 Pinia</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(App)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createPinia</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启用 Pinia</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><blockquote><p>TIP</p><p>也可以通过 <a href="https://vue3.chengpeiquan.com/upgrade.html#create-preset" target="_blank" rel="noreferrer">Create Preset</a> 创建新项目（选择 <code>vue</code> 技术栈进入，选择 <a href="https://github.com/awesome-starter/vue3-ts-vite-starter" target="_blank" rel="noreferrer">vue3-ts-vite</a> 模板），可以得到一个集成常用配置的项目启动模板，该模板现在使用 Pinia 作为全局状态管理工具。</p></blockquote><h3 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h3><h4 id="创建-store" tabindex="-1">创建 Store <a class="header-anchor" href="#创建-store" aria-label="Permalink to &quot;创建 Store&quot;">​</a></h4><p>Pinia 的核心称之为 Store 。</p><p>参照 Pinia 官网推荐的项目管理方案，也是先在 <code>src</code> 文件夹下创建一个 <code>stores</code> 文件夹，并在里面添加一个 <code>index.ts</code> 文件，然后就可以来添加一个最基础的 Store 。</p><p>Store 是通过 <code>defineStore</code> 方法来创建的，它有两种入参形式：</p><h4 id="形式-1-接收两个参数" tabindex="-1">形式 1 ：接收两个参数 <a class="header-anchor" href="#形式-1-接收两个参数" aria-label="Permalink to &quot;形式 1 ：接收两个参数&quot;">​</a></h4><p>接收两个参数，第一个参数是 Store 的唯一 ID ，第二个参数是 Store 的选项：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/stores/index.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;pinia&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> useStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;main&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Store 选项...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h4 id="形式-2-接收一个参数" tabindex="-1">形式 2 ：接收一个参数 <a class="header-anchor" href="#形式-2-接收一个参数" aria-label="Permalink to &quot;形式 2 ：接收一个参数&quot;">​</a></h4><p>接收一个参数，直接传入 Store 的选项，但是需要把唯一 ID 作为选项的一部分一起传入：</p><p>ts</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// src/stores/index.ts</span></span>
<span class="line"><span>import { defineStore } from &#39;pinia&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export const useStore = defineStore({</span></span>
<span class="line"><span>  id: &#39;main&#39;,</span></span>
<span class="line"><span>  // Store 选项...</span></span>
<span class="line"><span>})</span></span></code></pre></div><blockquote><p>TIP：不论是哪种创建形式，都必须为 Store 指定一个唯一 ID 。</p></blockquote><p>另外可以看到这里把导出的函数名命名为 <code>useStore</code> ，以 <code>use</code> 开头是 Vue 3 对可组合函数的一个命名约定。</p><p>并且使用的是 <code>export const</code> 而不是 <code>export default</code> （详见：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export" target="_blank" rel="noreferrer">命名导出和默认导出</a>），这样在使用的时候可以和其他的 Vue 组合函数保持一致，都是通过 <code>import { xxx } from &#39;xxx&#39;</code> 来导入。</p><p>如果有多个 Store ，可以分模块管理，并根据实际的功能用途进行命名（ e.g. <code>useMessageStore</code> 、 <code>useUserStore</code> 、 <code>useGameStore</code> … ）</p><hr><p><a href="https://pinia.vuejs.org/zh/" target="_blank" rel="noreferrer">Pinia官网</a></p><p><a href="https://vue3.chengpeiquan.com/pinia.html" target="_blank" rel="noreferrer">全局状态管理</a></p><p><a href="https://juejin.cn/post/7213994684262891576" target="_blank" rel="noreferrer">Pinia使用方法及持久化存储</a></p>`,29)]))}const g=a(t,[["render",p]]);export{c as __pageData,g as default};
