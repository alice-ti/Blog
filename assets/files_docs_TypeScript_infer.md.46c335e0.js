import{_ as s,o as n,c as a,O as l}from"./chunks/framework.999b5480.js";const A=JSON.parse('{"title":"infer","description":"","frontmatter":{},"headers":[],"relativePath":"files/docs/TypeScript/infer.md","filePath":"files/docs/TypeScript/infer.md","lastUpdated":1694613449000}'),o={name:"files/docs/TypeScript/infer.md"},p=l(`<h1 id="infer" tabindex="-1">infer <a class="header-anchor" href="#infer" aria-label="Permalink to &quot;infer&quot;">​</a></h1><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReturnType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">infer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">R</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">R</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">;</span></span></code></pre></div><blockquote><p><strong>infer</strong> 只能在 extends 的右边使用，<strong>infer P</strong> 的 <strong>P</strong> 也只能在条件类型为 True 的一边使用</p></blockquote><ol><li><strong>infer</strong> 必须在 <strong>extends</strong> 右侧使用，因为必须保证这个已知类型是由右侧的泛型推出来的，不然推导它的参数还有什么意义呢？检查时会跳过使用了 <strong>infer</strong> 的地方。</li><li>遵循以下规则推导 P，有四种情况：</li></ol><ul><li>P 只在一个位置占位：直接推出类型</li><li>P 都在协变位置占位：推出占位类型的联合</li><li>P 都在逆变位置占位：推出占位类型的交叉（目前只有参数是逆变）</li><li>P 既在顺变位置又在逆变位置：只有占位类型相同才能使 extends 为 true，且推出这个占位类型</li></ul><h2 id="推导泛型参数" tabindex="-1">推导泛型参数 <a class="header-anchor" href="#推导泛型参数" aria-label="Permalink to &quot;推导泛型参数&quot;">​</a></h2><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">numberPromise</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">numberPromise</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;infer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">P</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">P</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">never</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// number</span></span></code></pre></div>`,7),e=[p];function t(r,c,y,C,i,D){return n(),a("div",null,e)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};
