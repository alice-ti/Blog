import{_ as i,c as a,o as t,af as e}from"./chunks/framework.BivmJ8bT.js";const E=JSON.parse('{"title":"事件","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/03-事件.md","filePath":"docs/JavaScript/03-事件.md","lastUpdated":1748588477000}'),n={name:"docs/JavaScript/03-事件.md"};function l(h,s,p,r,k,o){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h1><h2 id="l0-和-l2-事件的区别" tabindex="-1">L0 和 L2 事件的区别 <a class="header-anchor" href="#l0-和-l2-事件的区别" aria-label="Permalink to &quot;L0 和 L2 事件的区别&quot;">​</a></h2><p>传统on注册（L0）</p><ul><li>同一个对象，后面注册的时间会覆盖前面注册的事件（同一个事件）</li><li>直接使用 <strong>null</strong> 覆盖就可以实现事件的解绑</li><li>都是 <strong>冒泡阶段</strong> 执行</li></ul><p>事件监听注册（L2）</p><ul><li>语法：<strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener" target="_blank" rel="noreferrer">addEventListener</a></strong>(事件类型，事件处理函数，是否使用捕获)</li><li>后面注册的时间不会覆盖前面注册的事件（同一个事件）</li><li>可以通过第三个参数决定是在冒泡或者捕获阶段执行</li><li>必须使用 <strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/removeEventListener" target="_blank" rel="noreferrer">removeEventListener</a></strong> (事件类型，事件处理函数，冒泡或捕获阶段)</li><li>匿名函数 <strong>无法解绑</strong></li></ul><h2 id="事件对象" tabindex="-1">事件对象 <a class="header-anchor" href="#事件对象" aria-label="Permalink to &quot;事件对象&quot;">​</a></h2><p>有时候在事件处理函数内部，例如<code>event</code>，<code>evt</code>或简单的<code>e</code>。这被称为<strong>事件对象</strong>，它被自动传递给事件处理函数，以提供额外的功能和信息。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, handleClick);</span></span></code></pre></div><h2 id="事件冒泡及捕获" tabindex="-1">事件冒泡及捕获 <a class="header-anchor" href="#事件冒泡及捕获" aria-label="Permalink to &quot;事件冒泡及捕获&quot;">​</a></h2><p>当一个事件发生在具有父元素的元素上时，现代浏览器运行两个不同的阶段 - <strong>捕获阶段</strong>和<strong>冒泡阶段</strong>。</p><p>在捕获阶段：</p><ul><li>浏览器检查元素的最外层祖先<code>&lt;html&gt;</code>，是否在捕获阶段中注册了一个<code>onclick</code>事件处理程序，如果是，则运行它。</li><li>然后，它移动到<code>&lt;html&gt;</code>中单击元素的下一个祖先元素，并执行相同的操作，然后是单击元素再下一个祖先元素，依此类推，直到到达实际点击的元素。</li></ul><p>在冒泡阶段，恰恰相反：</p><ul><li>浏览器检查实际点击的元素是否在冒泡阶段中注册了一个<code>onclick</code>事件处理程序，如果是，则运行它</li><li>然后它移动到下一个直接的祖先元素，并做同样的事情，然后是下一个，等等，直到它到达<code>&lt;html&gt;</code>元素。</li></ul><img src="http://c.biancheng.net/uploads/allimg/210927/09441W5b-0.gif" alt="事件捕获与事件冒泡" style="zoom:150%;"><h2 id="阻止冒泡-捕获" tabindex="-1">阻止冒泡/捕获 <a class="header-anchor" href="#阻止冒泡-捕获" aria-label="Permalink to &quot;阻止冒泡/捕获&quot;">​</a></h2><h3 id="event-stoppropagation" tabindex="-1">event.<strong>stopPropagation</strong>() <a class="header-anchor" href="#event-stoppropagation" aria-label="Permalink to &quot;event.**stopPropagation**()&quot;">​</a></h3><p>调用 <code>event.stopPropagation()</code>只会阻止传播链中后续的回调函数被触发。它不会阻止浏览器的自身的行为。</p><p>如果你希望阻止当前节点上的其他回调函数被调用的话，你可以使用更激进的 <code>event.stopImmediatePropagation()</code>方法。</p><p><strong>IE中使用<code>e.cancelBubble = true</code></strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> showAlert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;您点击了&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stopPropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> btn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#btn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, showAlert);</span></span></code></pre></div><h2 id="阻止默认行为" tabindex="-1">阻止默认行为 <a class="header-anchor" href="#阻止默认行为" aria-label="Permalink to &quot;阻止默认行为&quot;">​</a></h2><h3 id="event-preventdefault" tabindex="-1">event.preventDefault() <a class="header-anchor" href="#event-preventdefault" aria-label="Permalink to &quot;event.preventDefault()&quot;">​</a></h3><p>如果事件是可取消的，则 <code>preventDefault()</code> 方法会取消该事件，这意味着属于该事件的默认操作将不会发生。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="return-false" tabindex="-1">return false <a class="header-anchor" href="#return-false" aria-label="Permalink to &quot;return false&quot;">​</a></h3><p>在<strong>L0</strong>事件中，<strong>Javascript</strong>的<code>return false</code>只会阻止默认行为</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,29)]))}const c=i(n,[["render",l]]);export{E as __pageData,c as default};
