import{_ as s,c as n,o as a,e as t}from"./app.1ab11667.js";const m=JSON.parse('{"title":"⛵ 如何更新 package.json 中的依赖","description":"","frontmatter":{},"headers":[{"level":2,"title":"step","slug":"step","link":"#step","children":[]}],"relativePath":"files/diary/npm/ncu.md","lastUpdated":1676026478000}'),o={name:"files/diary/npm/ncu.md"},e=t(`<h1 id="⛵-如何更新-package-json-中的依赖" tabindex="-1">⛵ 如何更新 <strong>package.json</strong> 中的依赖 <a class="header-anchor" href="#⛵-如何更新-package-json-中的依赖" aria-hidden="true">#</a></h1><p>在一个项目中，其包依赖项列表保存在 <strong>package.json</strong> 文件中。每个已安装的包都被分配了一个版本号，一般由 三部分组成：<strong>major</strong> 、 <strong>minor</strong> 、 <strong>patch</strong> 。</p><ul><li><strong>^1.0.1</strong> <strong>major</strong> 表示非兼容的重大 API 改变</li><li><strong>~1.0.1</strong> <strong>minor</strong> 表示向后兼容的功能性改变</li><li><strong>*1.0.1</strong> <strong>patch</strong> 表示向后兼容的 bug 修正</li></ul><hr><h2 id="step" tabindex="-1">step <a class="header-anchor" href="#step" aria-hidden="true">#</a></h2><ol><li><p>执行 <strong>npm</strong> 命令行：<strong>npm outdated</strong> 找到过期的包</p></li><li><p>修正 package.json 中相关的版本规格。</p></li><li><p>运行 <strong>npm install</strong> 或 <strong>npm update</strong> 以升级。</p></li></ol><ul><li><p><strong>npm install</strong> 会安装一个包及其依赖的任何包。如果该包中存在 <strong>package-lock</strong> 或 <strong>shrinkwrap</strong> 文件（在并存时后者优先级更高），将会按其进行依赖项安装。</p></li><li><p><strong>npm update</strong> 会更新依赖项列表中出现的所有包，同时也会安装缺失的包。</p></li></ul><p>二者的区别是什么呢？</p><p>如果已安装的包版本满足 <strong>package.json</strong> 中定义的规范。</p><ul><li><strong>npm install</strong> 会以模糊版本策略忽略掉它，并不会重新安装。</li><li><strong>npm update</strong> 会在符合定义的前提下将其升级到对应的最新 <strong>latest</strong> 版本。</li></ul><hr><h4 id="👒-一个强大的工具是-npm-check-updates-会自动化地对-package-json-进行更新" tabindex="-1">👒 一个强大的工具是 <strong>npm-check-updates</strong>，会自动化地对 <strong>package.json</strong> 进行更新 <a class="header-anchor" href="#👒-一个强大的工具是-npm-check-updates-会自动化地对-package-json-进行更新" aria-hidden="true">#</a></h4><p>该 <strong>npm</strong> 工具可以被全局化安装：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm-check-updates</span></span>
<span class="line"></span></code></pre></div><p>然后运行</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npm-check-updates</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-u</span></span>
<span class="line"></span></code></pre></div><p>当然，你也可以使用 <strong>npx</strong></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm-check-updates</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-u</span></span>
<span class="line"></span></code></pre></div><p>运行之后，<strong>package.json</strong> 中的依赖项就被升级到最新了，包括 <strong>major</strong> 位的更新</p><p>之后 <strong>npm i</strong> 或 <strong>npm update</strong> 以完成升级</p>`,20),p=[e];function l(r,c,g,i,d,h){return a(),n("div",null,p)}const C=s(o,[["render",l]]);export{m as __pageData,C as default};
