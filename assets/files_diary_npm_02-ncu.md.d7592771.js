import{_ as s,o as n,c as a,O as t}from"./chunks/framework.999b5480.js";const m=JSON.parse('{"title":"⛵ 如何更新 package.json 中的依赖","description":"","frontmatter":{},"headers":[],"relativePath":"files/diary/npm/02-ncu.md","filePath":"files/diary/npm/02-ncu.md","lastUpdated":1703573862000}'),o={name:"files/diary/npm/02-ncu.md"},p=t(`<h1 id="⛵-如何更新-package-json-中的依赖" tabindex="-1">⛵ 如何更新 <strong>package.json</strong> 中的依赖 <a class="header-anchor" href="#⛵-如何更新-package-json-中的依赖" aria-label="Permalink to &quot;⛵ 如何更新 **package.json** 中的依赖&quot;">​</a></h1><p>在一个项目中，其包依赖项列表保存在 <strong>package.json</strong> 文件中。每个已安装的包都被分配了一个版本号，一般由 三部分组成：<strong>major</strong> 、 <strong>minor</strong> 、 <strong>patch</strong> 。</p><ul><li><strong>^1.0.1</strong> <strong>major</strong> 表示非兼容的重大 API 改变</li><li><strong>~1.0.1</strong> <strong>minor</strong> 表示向后兼容的功能性改变</li><li><strong>*1.0.1</strong> <strong>patch</strong> 表示向后兼容的 bug 修正</li></ul><hr><h2 id="使用-npm-install-或-npm-update-更新" tabindex="-1">使用 <strong>npm install</strong> 或 <strong>npm update</strong> 更新 <a class="header-anchor" href="#使用-npm-install-或-npm-update-更新" aria-label="Permalink to &quot;使用 **npm install** 或 **npm update** 更新&quot;">​</a></h2><ol><li><p>执行 <strong>npm</strong> 命令行：<strong>npm outdated</strong> 找到过期的包</p></li><li><p>修正 <strong>package.json</strong> 中相关的版本规格。</p></li><li><p>运行 <strong>npm install</strong> 或 <strong>npm update</strong> 以升级。</p></li></ol><ul><li><p><strong>npm install</strong> 会安装一个包及其依赖的任何包。如果该包中存在 <strong>package-lock</strong> 或 <strong>shrinkwrap</strong> 文件（在并存时后者优先级更高），将会按其进行依赖项安装。</p></li><li><p><strong>npm update</strong> 会更新依赖项列表中出现的所有包，同时也会安装缺失的包。</p></li></ul><p>二者的区别是什么呢？</p><p>如果已安装的包版本满足 <strong>package.json</strong> 中定义的规范。</p><ul><li><strong>npm install</strong> 会以模糊版本策略忽略掉它，并不会重新安装。</li><li><strong>npm update</strong> 会在符合定义的前提下将其升级到对应的最新 <strong>latest</strong> 版本。</li></ul><hr><h2 id="使用-npm-check-updates-更新依赖" tabindex="-1">使用 <strong>npm-check-updates</strong> 更新依赖 <a class="header-anchor" href="#使用-npm-check-updates-更新依赖" aria-label="Permalink to &quot;使用 **npm-check-updates** 更新依赖&quot;">​</a></h2><blockquote><p><a href="https://github.com/raineorshine/npm-check-updates" target="_blank" rel="noreferrer">npm-check-updates 文档</a></p></blockquote><h3 id="👒-一个强大的工具是-npm-check-updates-会自动化地对-package-json-进行更新" tabindex="-1">👒 一个强大的工具是 <strong>npm-check-updates</strong>，会自动化地对 <strong>package.json</strong> 进行更新 <a class="header-anchor" href="#👒-一个强大的工具是-npm-check-updates-会自动化地对-package-json-进行更新" aria-label="Permalink to &quot;👒 一个强大的工具是 **npm-check-updates**，会自动化地对 **package.json** 进行更新&quot;">​</a></h3><p>该 <strong>npm</strong> 工具可以被全局化安装：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm-check-updates</span></span></code></pre></div><p>要升级依赖性，你只需要运行</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm-check-updates</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-u</span></span>
<span class="line"><span style="color:#FFCB6B;">npm-check-updates</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--upgrade</span></span></code></pre></div><p>当然，你也可以使用 <strong>npx</strong></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm-check-updates</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-u</span></span></code></pre></div><p>运行之后，<strong>package.json</strong> 中的依赖项就被升级到最新了，包括 <strong>major</strong> 位的更新</p><p>之后 <strong>npm i</strong> 或 <strong>npm update</strong> 以完成升级</p><blockquote><p>使用 <strong>ncu -u</strong> 方法更新后，<strong>npm install</strong> 不会自动运行，所以一定要在之后运行它来更新 <strong>package-lock.json</strong></p></blockquote><h3 id="使用-npm-check-updates-互动模式" tabindex="-1">使用 <strong>npm-check-updates</strong> 互动模式 <a class="header-anchor" href="#使用-npm-check-updates-互动模式" aria-label="Permalink to &quot;使用 **npm-check-updates** 互动模式&quot;">​</a></h3><p>互动模式允许你选择特定的软件包进行更新。默认情况下，所有软件包都被选中。</p><p>向下浏览每一个软件包，用 <strong>空格</strong> 来取消选择，当你准备好升级所有选择的软件包时，<strong>回车键(enter)</strong> 确定。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ncu</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--interactive</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">or</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">ncu</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-i</span></span></code></pre></div><p>有几种方法可以提升交互式 <strong>npm-check-updates</strong> 的体验。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ncu</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--interactive</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--format</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">group</span></span></code></pre></div><p>这个命令将软件包分组并组织成 主版本（major）、次要（minor）和补丁（patch）版本。</p>`,30),e=[p];function l(r,c,g,i,d,h){return n(),a("div",null,e)}const C=s(o,[["render",l]]);export{m as __pageData,C as default};
