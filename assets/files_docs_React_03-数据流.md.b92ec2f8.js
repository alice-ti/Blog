import{_ as t,o as a,c as e,O as o}from"./chunks/framework.999b5480.js";const m=JSON.parse('{"title":"React 中数据流向","description":"","frontmatter":{},"headers":[],"relativePath":"files/docs/React/03-数据流.md","filePath":"files/docs/React/03-数据流.md","lastUpdated":1687782807000}'),s={name:"files/docs/React/03-数据流.md"},r=o('<h1 id="react-中数据流向" tabindex="-1">React 中数据流向 <a class="header-anchor" href="#react-中数据流向" aria-label="Permalink to &quot;React 中数据流向&quot;">​</a></h1><h2 id="数据流" tabindex="-1">数据流 <a class="header-anchor" href="#数据流" aria-label="Permalink to &quot;数据流&quot;">​</a></h2><blockquote><p>UI = render(state)</p></blockquote><p>React 的核心特征是 <strong>数据驱动视图</strong>。 React 的视图会随着数据的变化而变化，我们说的组件通信其实就是组件之间建立的数据上的连接，这背后是一套环环相扣的 React 数据流解决方案</p><h3 id="基于-state-的单向数据流" tabindex="-1">基于 <strong>state</strong> 的单向数据流 <a class="header-anchor" href="#基于-state-的单向数据流" aria-label="Permalink to &quot;基于 **state** 的单向数据流&quot;">​</a></h3><p>所谓单向数据流，指的就是当前组件的 <strong>state</strong> 以 <strong>props</strong> 的形式流动时，只能流向组件树中比自己层级更低的组件</p><p>组件并不会改变接收的数据，只会监听数据的变化，当数据发生变化时它们会使用接收到的新值，而不是去修改已有的值。当组件的更新机制触发后，只是使用新值进行重新渲染。</p><h3 id="props" tabindex="-1">props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;props&quot;">​</a></h3><p>由于 React 是单向数据流，所以 <strong>props</strong> 基本上也就是从父组件向子组件传递的数据。<strong>props</strong> 是组件的只读属性，组件内部不能直接修改 <strong>props</strong>。</p><h2 id="state、props-区别联系" tabindex="-1"><em>state</em>、<em>props</em> 区别联系 <a class="header-anchor" href="#state、props-区别联系" aria-label="Permalink to &quot;*state*、*props* 区别联系&quot;">​</a></h2><p><strong>props</strong> 从某种角度来说，也属于 <strong>state</strong> 的一类</p>',11),n=[r];function p(c,i,l,d,_,h){return a(),e("div",null,n)}const u=t(s,[["render",p]]);export{m as __pageData,u as default};
