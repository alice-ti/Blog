import{_ as t,c as s,o as a,af as o}from"./chunks/framework.Cj92BNWl.js";const u=JSON.parse('{"title":"NestJS 项目结构","description":"","frontmatter":{},"headers":[],"relativePath":"files/diary/nestJs/04-项目结构.md","filePath":"files/diary/nestJs/04-项目结构.md","lastUpdated":1738744669000}'),d={name:"files/diary/nestJs/04-项目结构.md"};function l(n,e,r,p,c,i){return a(),s("div",null,e[0]||(e[0]=[o(`<h1 id="nestjs-项目结构" tabindex="-1">NestJS 项目结构 <a class="header-anchor" href="#nestjs-项目结构" aria-label="Permalink to &quot;NestJS 项目结构&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src</span></span>
<span class="line"><span>├── app.controller.spec.ts</span></span>
<span class="line"><span>├── app.controller.ts</span></span>
<span class="line"><span>├── app.module.ts</span></span>
<span class="line"><span>├── app.service.ts</span></span>
<span class="line"><span>├── main.ts</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th></th></tr></thead><tbody><tr><td style="text-align:left;"><code>app.controller.ts</code></td><td>单个路由的基本控制器(Controller)</td></tr><tr><td style="text-align:left;"><code>app.controller.spec.ts</code></td><td>针对控制器的单元测试</td></tr><tr><td style="text-align:left;"><code>app.module.ts</code></td><td>应用程序的根模块(Module)</td></tr><tr><td style="text-align:left;"><code>app.service.ts</code></td><td>具有单一方法的基本服务(Service)</td></tr><tr><td style="text-align:left;"><code>main.ts</code></td><td>应用程序的入口文件，它使用核心函数 <code>NestFactory</code> 来创建 Nest 应用程序的实例</td></tr></tbody></table><p><code>.mudule</code>文件需要使用一个<code>@Module()</code> 装饰器的类，装饰器可以理解成一个封装好的函数，其实是一个语法糖（对装饰器不了解的，可以看<a href="https://juejin.cn/post/6859314697204662279#heading-2" target="_blank" rel="noreferrer">走近MidwayJS：初识TS装饰器与IoC机制</a>）。<code>@Module()</code> 装饰器接收四个属性：<code>providers</code>、<code>controllers</code>、<code>imports</code>、<code>exports</code>。</p><ul><li>providers：<code>Nest.js</code>注入器实例化的提供者（服务提供者），处理<em>具体的业务逻辑</em>，各个模块之间可以共享（<em>注入器的概念后面依赖注入部分会讲解</em>）；</li><li>controllers：处理http请求，包括路由控制，向客户端返回响应，将具体业务逻辑委托给providers处理；</li><li>imports：导入模块的列表，如果需要使用其他模块的服务，需要通过这里导入；</li><li>exports：导出服务的列表，供其他模块导入使用。如果希望当前模块下的服务可以被其他模块共享，需要在这里配置导出；</li></ul><blockquote><p>AngularJS、Spring和Nest.js都是基于控制反转原则设计的,而且都使用了依赖注入的方式来解决解耦问题</p></blockquote>`,6)]))}const h=t(d,[["render",l]]);export{u as __pageData,h as default};
