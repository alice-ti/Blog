import{_ as s,o as n,c as a,O as t}from"./chunks/framework.999b5480.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"files/docs/React/11-ref.md","filePath":"files/docs/React/11-ref.md","lastUpdated":1708226832000}'),o={name:"files/docs/React/11-ref.md"},e=t(`<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h1><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">App</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">dom</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setDOM</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">setDOM</span><span style="color:#89DDFF;">}&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><strong>ref</strong> 有两种形式</p><ul><li>形如 <strong>{current: T}</strong> 的数据结构</li><li>回调函数形式，会在 <strong>ref</strong> 更新、销毁时触发 例子中的 <strong>setDOM</strong> 是 <strong>useState</strong> 的 <strong>dispatch</strong> 方法，也有两种调用形式：</li></ul><p>直接传递更新后的值，比如 <strong>setDOM(xxx)</strong> 传递更新状态的方法，比如 <strong>setDOM(oldDOM =&gt; return /<em>一些处理逻辑</em>/)</strong> 在例子中，虽然反常，但<strong>ref</strong>的第二种形式和<strong>dispatch</strong>的第二种形式确实是契合的。</p><p>也就是说，在例子中传递给<strong>ref</strong>的<strong>setDOM</strong>方法，会在「<strong>div对应DOM</strong>」更新、销毁时执行，那么<strong>dom</strong>状态中保存的就是「<strong>div对应DOM</strong>」的最新值。</p><hr><p><a href="https://zhuanlan.zhihu.com/p/613787501" target="_blank" rel="noreferrer">2个奇怪的React写法</a></p>`,8),l=[e];function p(r,c,i,D,F,y){return n(),a("div",null,l)}const _=s(o,[["render",p]]);export{d as __pageData,_ as default};
