import{_ as a,c as s,o as i,af as n}from"./chunks/framework.BivmJ8bT.js";const k=JSON.parse('{"title":"ENV","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Vite/04-env.md","filePath":"docs/Vite/04-env.md","lastUpdated":1748592476000}'),t={name:"docs/Vite/04-env.md"};function o(d,e,p,l,c,h){return i(),s("div",null,e[0]||(e[0]=[n(`<h1 id="env" tabindex="-1">ENV <a class="header-anchor" href="#env" aria-label="Permalink to &quot;ENV&quot;">​</a></h1><h2 id="import-meta-env" tabindex="-1"><a href="https://cn.vitejs.dev/guide/env-and-mode.html" target="_blank" rel="noreferrer">import.meta.env</a> <a class="header-anchor" href="#import-meta-env" aria-label="Permalink to &quot;[import.meta.env](https://cn.vitejs.dev/guide/env-and-mode.html)&quot;">​</a></h2><p>Vite 在一个特殊的 <strong><code>import.meta.env</code></strong> 对象上暴露环境变量。这里有一些在所有情况下都可以使用的内建变量</p><h2 id="env-1" tabindex="-1"><code>.env</code> <a class="header-anchor" href="#env-1" aria-label="Permalink to &quot;\`.env\`&quot;">​</a></h2><p>Vite 使用 <a href="https://github.com/motdotla/dotenv" target="_blank" rel="noreferrer">dotenv</a> 从你的 <a href="https://cn.vite.dev/config/shared-options.html#envdir" target="_blank" rel="noreferrer">环境目录</a> 中的下列文件加载额外的环境变量：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.env                # 所有情况下都会加载</span></span>
<span class="line"><span>.env.local          # 所有情况下都会加载，但会被 git 忽略</span></span>
<span class="line"><span>.env.[mode]         # 只在指定模式下加载</span></span>
<span class="line"><span>.env.[mode].local   # 只在指定模式下加载，但会被 git 忽略</span></span></code></pre></div><h3 id="环境加载优先级" tabindex="-1">环境加载优先级 <a class="header-anchor" href="#环境加载优先级" aria-label="Permalink to &quot;环境加载优先级&quot;">​</a></h3><p>一份用于指定模式的文件（例如 <code>.env.production</code>）会比通用文件的优先级更高（例如 <code>.env</code>）。</p><p>Vite 总是会加载 <code>.env</code> 和 <code>.env.local</code> 文件，除此之外还会加载模式特定的 <code>.env.[mode]</code> 文件。在模式特定文件中声明的变量优先级高于通用文件中的变量，但仅在 <code>.env</code> 或 <code>.env.local</code> 中定义的变量仍然可以在环境中使用。</p><p>另外，Vite 执行时已经存在的环境变量有最高的优先级，不会被 <code>.env</code> 类文件覆盖。例如当运行 <code>VITE_SOME_KEY=123 vite build</code> 的时候。</p><p><code>.env</code> 类文件会在 Vite 启动一开始时被加载，而改动会在重启服务器后生效。</p><p>加载的环境变量也会通过 <code>import.meta.env</code> 以字符串形式暴露给客户端源码。</p><p>为了防止意外地将一些环境变量泄漏到客户端，只有以 <code>VITE_</code> 为前缀的变量才会暴露给经过 vite 处理的代码。例如下面这些环境变量：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .env</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_SOME_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=123</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=foobar</span></span></code></pre></div><p>只有 <code>VITE_SOME_KEY</code> 会被暴露为 <code>import.meta.env.VITE_SOME_KEY</code> 提供给客户端源码，而 <code>DB_PASSWORD</code> 则不会。</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .env</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.log(import.meta.env.VITE_SOME_KEY) // </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.log(import.meta.env.DB_PASSWORD) // undefined</span></span></code></pre></div><h3 id="环境变量解析" tabindex="-1">环境变量解析 <a class="header-anchor" href="#环境变量解析" aria-label="Permalink to &quot;环境变量解析&quot;">​</a></h3><p>如上所示，<code>VITE_SOME_KEY</code> 是一个数字，但在解析时会返回一个字符串。布尔类型的环境变量也会发生同样的情况。在代码中使用时，请确保转换为所需的类型。</p><blockquote><p>请注意，如果想要在环境变量中使用 <code>$</code> 符号，则必须使用 <code>\\</code> 对其进行转义。</p></blockquote><h3 id="安全注意事项" tabindex="-1">安全注意事项 <a class="header-anchor" href="#安全注意事项" aria-label="Permalink to &quot;安全注意事项&quot;">​</a></h3><ul><li><code>.env.*.local</code> 文件应是本地的，可以包含敏感变量。你应该将 <code>*.local</code> 添加到你的 <code>.gitignore</code> 中，以避免它们被 git 检入。</li><li>由于任何暴露给 Vite 源码的变量最终都将出现在客户端包中，<code>VITE_*</code> 变量应该不包含任何敏感信息。</li></ul><h2 id="模式" tabindex="-1">模式 <a class="header-anchor" href="#模式" aria-label="Permalink to &quot;模式&quot;">​</a></h2><p>默认情况下，开发服务器 (<code>dev</code> 命令) 运行在 <code>development</code> (开发) 模式，而 <code>build</code> 命令则运行在 <code>production</code> (生产) 模式。</p><p>这意味着当执行 <code>vite build</code> 时，它会自动加载 <code>.env.production</code> 中可能存在的环境变量：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .env.production</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_APP_TITLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=My App</span></span></code></pre></div><p>在你的应用中，你可以使用 <code>import.meta.env.VITE_APP_TITLE</code> 渲染标题。</p><p>在某些情况下，若想在 <code>vite build</code> 时运行不同的模式来渲染不同的标题，你可以通过传递 <code>--mode</code> 选项标志来覆盖命令使用的默认模式。例如，如果你想在 staging （预发布）模式下构建应用：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --mode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> staging</span></span></code></pre></div><p>还需要新建一个 <code>.env.staging</code> 文件：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .env.staging</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_APP_TITLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=My App (staging)</span></span></code></pre></div><p>由于 <code>vite build</code> 默认运行生产模式构建，你也可以通过使用不同的模式和对应的 <code>.env</code> 文件配置来改变它，用以运行开发模式的构建：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .env.testing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NODE_ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=development</span></span></code></pre></div>`,32)]))}const v=a(t,[["render",o]]);export{k as __pageData,v as default};
