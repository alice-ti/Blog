import{_ as i,c as t,o as a,af as n}from"./chunks/framework.BivmJ8bT.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/React/11-ref.md","filePath":"docs/React/11-ref.md","lastUpdated":1748592476000}'),e={name:"docs/React/11-ref.md"};function r(h,s,l,p,k,o){return a(),t("div",null,s[0]||(s[0]=[n(`<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h1><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setDOM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{setDOM}&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>ref</strong> 有两种形式</p><ul><li>形如 <strong>{current: T}</strong> 的数据结构</li><li>回调函数形式，会在 <strong>ref</strong> 更新、销毁时触发 例子中的 <strong>setDOM</strong> 是 <strong>useState</strong> 的 <strong>dispatch</strong> 方法，也有两种调用形式：</li></ul><p>直接传递更新后的值，比如 <strong>setDOM(xxx)</strong> 传递更新状态的方法，比如 <strong>setDOM(oldDOM =&gt; return /<em>一些处理逻辑</em>/)</strong> 在例子中，虽然反常，但<strong>ref</strong>的第二种形式和<strong>dispatch</strong>的第二种形式确实是契合的。</p><p>也就是说，在例子中传递给<strong>ref</strong>的<strong>setDOM</strong>方法，会在「<strong>div对应DOM</strong>」更新、销毁时执行，那么<strong>dom</strong>状态中保存的就是「<strong>div对应DOM</strong>」的最新值。</p><hr><p><a href="https://zhuanlan.zhihu.com/p/613787501" target="_blank" rel="noreferrer">2个奇怪的React写法</a></p>`,8)]))}const E=i(e,[["render",r]]);export{d as __pageData,E as default};
