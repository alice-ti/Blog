import{_ as a,c as i,o as n,af as t}from"./chunks/framework.BivmJ8bT.js";const c=JSON.parse('{"title":"Next.js","description":"","frontmatter":{},"headers":[],"relativePath":"docs/React/70-Nextjs.md","filePath":"docs/React/70-Nextjs.md","lastUpdated":1748594539000}'),e={name:"docs/React/70-Nextjs.md"};function p(l,s,h,k,r,o){return n(),i("div",null,s[0]||(s[0]=[t(`<h1 id="next-js" tabindex="-1">Next.js <a class="header-anchor" href="#next-js" aria-label="Permalink to &quot;Next.js&quot;">​</a></h1><h2 id="创建-nextjs-项目" tabindex="-1">创建 NextJs 项目 <a class="header-anchor" href="#创建-nextjs-项目" aria-label="Permalink to &quot;创建 NextJs 项目&quot;">​</a></h2><p>通过调用 <code>create-next-app</code> 工具完成的，该工具为你创建了一个 Next.js 应用程序。通过 <code>--example</code> 参数指定使用 <a href="https://github.com/vercel/next-learn-starter/tree/master/learn-starter" target="_blank" rel="noreferrer">此模板</a> 。</p><blockquote><p>如果不成功，请查看 <a href="https://github.com/vercel/next-learn-starter/blob/master/errors/install.md" target="_blank" rel="noreferrer">此页面</a>。</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-next-app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nextjs-blog</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --use-npm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --example</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/vercel/next-learn-starter/tree/master/learn-starter&quot;</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用pnpm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-next-app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nextjs-blog</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --use-pnpm</span></span></code></pre></div><h3 id="运行开发服务器" tabindex="-1">运行开发服务器 <a class="header-anchor" href="#运行开发服务器" aria-label="Permalink to &quot;运行开发服务器&quot;">​</a></h3><p>现在，您有了一个名为 <code>nextjs-blog</code> 的新目录。我们 <code>cd</code> 进入此目录：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nextjs-blog</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><p>这将在 <strong>3000</strong> 端口上启动 Next.js 应用程序的“开发服务器”, 在浏览器中打开 <a href="http://localhost:3000/" target="_blank" rel="noreferrer">http://localhost:3000</a> 。</p><h2 id="nextjs-目录解析" tabindex="-1">NextJs 目录解析 <a class="header-anchor" href="#nextjs-目录解析" aria-label="Permalink to &quot;NextJs 目录解析&quot;">​</a></h2><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>app</span></span>
<span class="line"><span>├── features</span></span>
<span class="line"><span>│   ├── metadata</span></span>
<span class="line"><span>│   │   └── page.tsx</span></span>
<span class="line"><span>│   ├── layout.tsx</span></span>
<span class="line"><span>│   ├── template.tsx</span></span>
<span class="line"><span>│   ├── loading.tsx</span></span>
<span class="line"><span>│   └── error.tsx</span></span>
<span class="line"><span>├── page.tsx</span></span>
<span class="line"><span>├── layout.tsx</span></span>
<span class="line"><span>├── template.tsx</span></span>
<span class="line"><span>├── loading.tsx</span></span>
<span class="line"><span>├── error.tsx</span></span>
<span class="line"><span>└── not-found.tsx</span></span></code></pre></div><p>路由为 <code>/</code> 页面会组合成这样的代码结构</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ErrorBoundary</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Suspense</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Loading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Suspense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ErrorBoundary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>路由为 <code>/features/metadata</code> 页面的代码结构：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ErrorBoundary</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Suspense</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Loading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ErrorBoundary</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Suspense</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Loading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Suspense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ErrorBoundary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Suspense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ErrorBoundary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="平行路由和插槽功能" tabindex="-1">平行路由和插槽功能 <a class="header-anchor" href="#平行路由和插槽功能" aria-label="Permalink to &quot;平行路由和插槽功能&quot;">​</a></h3><p>使用 <code>@</code> 开头的目录名下面的文件，将会自动注入到 <code>Layout</code> 组件的 props 中。</p><h2 id="next-js-项目创建" tabindex="-1">Next.js 项目创建 <a class="header-anchor" href="#next-js-项目创建" aria-label="Permalink to &quot;Next.js 项目创建&quot;">​</a></h2><h2 id="next-js-路由" tabindex="-1">Next.js 路由 <a class="header-anchor" href="#next-js-路由" aria-label="Permalink to &quot;Next.js 路由&quot;">​</a></h2><p>在 <strong>Next.js 12（及以下</strong>）对应的路由系统，是所有路由文件都写在 <strong>pages</strong> 目录下，每个文件都会生成一个路由</p><p>相比于 <strong>Next 12</strong> ,<strong>Next 13</strong> 一个比较大的改动是基于文件的路由系统，增加了一个 <strong>app</strong> 目录，每一层路由必须建一个文件夹，在该文件夹中建立 <strong>page.tsx</strong> 作为该路由主页面</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9741de1ba84b4b478863c0a8155cc6a6~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="Segment"></p><p>Next.js 更改基于文件的路由系统</p><ol><li>实现嵌套路由和持久化缓存</li><li>支持 React 18 中的 <code>React server Component</code>，实现 <code>Streaming</code>（流渲染）</li><li>实现代码目录分组，将当前路由下的测试文件、组件、样式文件友好地放在一起，避免全局查找</li></ol><h3 id="app-文件夹下的约定式路由" tabindex="-1">app 文件夹下的约定式路由 <a class="header-anchor" href="#app-文件夹下的约定式路由" aria-label="Permalink to &quot;app 文件夹下的约定式路由&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./app</span></span>
<span class="line"><span>├── GlobalNav.tsx</span></span>
<span class="line"><span>├── layout.tsx</span></span>
<span class="line"><span>├── page.tsx</span></span>
<span class="line"><span>├── layouts</span></span>
<span class="line"><span>│   ├── CategoryNav.tsx</span></span>
<span class="line"><span>│   ├── [categorySlug]</span></span>
<span class="line"><span>│   │   ├── SubCategoryNav.tsx</span></span>
<span class="line"><span>│   │   ├── [subCategorySlug]</span></span>
<span class="line"><span>│   │   │   └── page.tsx</span></span>
<span class="line"><span>│   │   ├── layout.tsx</span></span>
<span class="line"><span>│   │   ├── page.tsx</span></span>
<span class="line"><span>│   │   └── template.tsx</span></span>
<span class="line"><span>│   ├── layout.tsx</span></span>
<span class="line"><span>│   ├── page.tsx</span></span>
<span class="line"><span>│   └── template.tsx</span></span></code></pre></div><p>每个文件下都有 3 个文件 <code>layout.tsx</code>、<code>page.tsx</code> 、<code>template.tsx</code>、</p><ul><li><code>layout.tsx</code> 该路由下的公共导航，切换路由时，不会刷新</li><li><code>template.tsx</code> 该路由下的公共部分，切换路由时，会刷新</li><li><code>page.tsx</code> 该路由的主页面</li></ul><p>当我们点击导航时候，页面上刷新部分边框会高亮闪烁，我们可以很好地理解代码目录结构组织与页面呈现的路由和渲染。</p><p>在 app 目录下每个文件夹下，还可以有 <code>loading.tsx</code>、<code>error.tsx</code></p><ul><li><code>loading.tsx</code> 该路由的主页面在异步渲染中，会显示的 loading 组件的内容；例如我们可以用它来写骨架屏（Skeleton）</li><li><code>error.tsx</code> 该路由的页面渲染出错，会显示该页面，也就是封装了 React 的 ErrorBoundary。</li></ul><p>以上除了 <code>page.tsx</code> 其他文件都是可选的，除了这些约定名称的文件外，我们可以建立任意文件，比如 <code>components.tsx</code>、 <code>test.tsx</code> 等自定义文件。</p><p>app 目录可以很好地将页面、组件、测试文件放在一起，管理代码目录，避免开发时全局查找。</p><h3 id="路由分组" tabindex="-1">路由分组 <a class="header-anchor" href="#路由分组" aria-label="Permalink to &quot;路由分组&quot;">​</a></h3><p>app 同层级目录下还支持多个 <code>layout</code>， 使用 <code>（文件夹）</code>区分，<code>（文件夹）</code>不会体现在路由上，只是单纯用来做代码分组。</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./app</span></span>
<span class="line"><span>├── (checkout)</span></span>
<span class="line"><span>│   ├── checkout</span></span>
<span class="line"><span>│   │   └── page.tsx</span></span>
<span class="line"><span>│   ├── layout.tsx</span></span>
<span class="line"><span>│   └── template.tsx</span></span>
<span class="line"><span>├── (main)</span></span>
<span class="line"><span>│   ├── layout.tsx</span></span>
<span class="line"><span>│   ├── page.tsx</span></span>
<span class="line"><span>│   └── template.tsx</span></span></code></pre></div><p><img src="https://nextjs.org/_next/image?url=%2Fdocs%2Flight%2Froute-group-organisation.png&amp;w=1920&amp;q=75&amp;dpl=dpl_FpaZTH2NWJVagicr5Ufftx42ZVuQ" alt="route-group"></p><h2 id="react-server-components" tabindex="-1">React Server Components <a class="header-anchor" href="#react-server-components" aria-label="Permalink to &quot;React Server Components&quot;">​</a></h2><h2 id="渲染方式" tabindex="-1"><a href="./....\\wrong\\基础渲染模式.html">渲染方式</a> <a class="header-anchor" href="#渲染方式" aria-label="Permalink to &quot;[渲染方式](..\\..\\wrong\\基础渲染模式.md)&quot;">​</a></h2><blockquote><p>默认的js文件都只会运行在服务端，不会出现在客户端，如果需要在客户端进行交互的组件，那么需要在 <code>js</code> 文件最顶部添加 <code>&quot;use client&quot;</code> 来标识，表明代码需要在客户端运行，这时候这部分代码才会出现在客户端</p></blockquote><hr><p><a href="https://nextjs.org/blog/next-13" target="_blank" rel="noreferrer">Next.js 13</a></p><p><a href="https://juejin.cn/post/7160084572942630926" target="_blank" rel="noreferrer">你好，Next.js 13</a></p><p><a href="https://juejin.cn/post/7221162775074734135" target="_blank" rel="noreferrer">Next.js 13 的 app 目录模式功能梳理</a></p><p><a href="https://juejin.cn/post/7177288314163036217" target="_blank" rel="noreferrer">一起来学 next.js - getStaticProps、getStaticPaths 篇</a></p>`,47)]))}const g=a(e,[["render",p]]);export{c as __pageData,g as default};
