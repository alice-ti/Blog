import{_ as e,c as o,o as r,af as t}from"./chunks/framework.BivmJ8bT.js";const m=JSON.parse('{"title":"HTTP 数据传输方式","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Network/03-HTTP 数据传输方式.md","filePath":"docs/Network/03-HTTP 数据传输方式.md","lastUpdated":1748592476000}'),d={name:"docs/Network/03-HTTP 数据传输方式.md"};function c(l,a,n,s,i,p){return r(),o("div",null,a[0]||(a[0]=[t('<h1 id="http-数据传输方式" tabindex="-1">HTTP 数据传输方式 <a class="header-anchor" href="#http-数据传输方式" aria-label="Permalink to &quot;HTTP 数据传输方式&quot;">​</a></h1><h2 id="query" tabindex="-1">query <a class="header-anchor" href="#query" aria-label="Permalink to &quot;query&quot;">​</a></h2><p>url 中 <code>?</code> 后的字符串</p><h2 id="url-params" tabindex="-1">url params <a class="header-anchor" href="#url-params" aria-label="Permalink to &quot;url params&quot;">​</a></h2><p>url 中的参数</p><h2 id="json" tabindex="-1">json <a class="header-anchor" href="#json" aria-label="Permalink to &quot;json&quot;">​</a></h2><p>json 格式的数据。 <code>content type</code> 为 <code>application/json</code></p><h2 id="form-data" tabindex="-1">form data <a class="header-anchor" href="#form-data" aria-label="Permalink to &quot;form data&quot;">​</a></h2><p><code>content type</code> 为 <code>multipart/form-data</code>，且使用 <code>FormData</code> 对象来封装传输的内容。</p><h2 id="form-urlencoded" tabindex="-1">form urlencoded <a class="header-anchor" href="#form-urlencoded" aria-label="Permalink to &quot;form urlencoded&quot;">​</a></h2><p>类似 query 字符串，只不过是放在 <strong>body</strong> 中。</p><p><code>axios</code> 中需要指定 <code>content type</code> 为 <code>application/x-www-form-urlencoded</code>，并且对数据用 <code>qs</code> 或者 <code>query-string</code> 库做 <code>url encode</code></p><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>body 中：</p><ul><li><p>json</p></li><li><p>form data</p></li><li><p>form urlencoded</p></li></ul>',15)]))}const h=e(d,[["render",c]]);export{m as __pageData,h as default};
