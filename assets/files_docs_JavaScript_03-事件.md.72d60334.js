import{_ as e,c as t,o as r,e as l}from"./app.b24d80f6.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"L0 和 L2 事件的区别","slug":"l0-和-l2-事件的区别","link":"#l0-和-l2-事件的区别","children":[]}],"relativePath":"files/docs/JavaScript/03-事件.md","lastUpdated":1680151218000}'),a={name:"files/docs/JavaScript/03-事件.md"},n=l('<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h1><h2 id="l0-和-l2-事件的区别" tabindex="-1">L0 和 L2 事件的区别 <a class="header-anchor" href="#l0-和-l2-事件的区别" aria-hidden="true">#</a></h2><p>传统on注册（L0）</p><ul><li>同一个对象，后面注册的时间会覆盖前面注册的事件（同一个事件）</li><li>直接使用 <strong>null</strong> 覆盖就可以实现事件的解绑</li><li>都是 <strong>冒泡阶段</strong> 执行</li></ul><p>事件监听注册（L2）</p><ul><li>语法：<strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener" target="_blank" rel="noreferrer">addEventListener</a></strong>(事件类型，事件处理函数，是否使用捕获)</li><li>后面注册的时间不会覆盖前面注册的事件（同一个事件）</li><li>可以通过第三个参数决定是在冒泡或者捕获阶段执行</li><li>必须使用 <strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/removeEventListener" target="_blank" rel="noreferrer">removeEventListener</a></strong> (事件类型，事件处理函数，冒泡或捕获阶段)</li><li>匿名函数 <strong>无法解绑</strong></li></ul>',6),i=[n];function o(s,d,_,c,h,p){return r(),t("div",null,i)}const v=e(a,[["render",o]]);export{f as __pageData,v as default};
