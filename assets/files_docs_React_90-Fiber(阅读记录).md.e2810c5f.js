import{_ as s,c as n,o as a,N as l}from"./chunks/framework.cd0483b5.js";const A=JSON.parse('{"title":"⛵","description":"","frontmatter":{},"headers":[],"relativePath":"files/docs/React/90-Fiber(阅读记录).md","lastUpdated":1684487890000}'),o={name:"files/docs/React/90-Fiber(阅读记录).md"},p=l(`<h1 id="⛵" tabindex="-1">⛵ <a class="header-anchor" href="#⛵" aria-label="Permalink to &quot;⛵&quot;">​</a></h1><blockquote><p><a href="https://react.iamkasong.com/" target="_blank" rel="noreferrer">React 技术揭秘</a></p></blockquote><p>React 架构</p><ul><li>Scheduler（调度器）—— 调度任务的优先级，高优任务优先进入Reconciler</li><li>Reconciler（协调器）—— 负责找出变化的组件</li><li>Renderer（渲染器）—— 将变化的组件渲染到页面上</li></ul><hr><h2 id="fiber实现原理" tabindex="-1">Fiber实现原理 <a class="header-anchor" href="#fiber实现原理" aria-label="Permalink to &quot;Fiber实现原理&quot;">​</a></h2><blockquote><p><a href="https://github.com/facebook/react/issues/7942" target="_blank" rel="noreferrer">Fiber Principles</a></p></blockquote><p>Fiber并不是计算机术语中的新名词，中文翻译叫做纤程，与进程（Process）、线程（Thread）、协程（Coroutine）同为程序执行过程。</p><p><strong>React Fiber</strong> 可以理解为：React内部实现的一套状态更新机制。支持任务不同<strong>优先级</strong>，可中断与恢复，并且恢复后可以复用之前的<strong>中间状态</strong>。 其中每个任务更新单元为 <strong>React Element</strong> 对应的 <strong>Fiber节点</strong>。</p><h3 id="fiber-结构" tabindex="-1">Fiber 结构 <a class="header-anchor" href="#fiber-结构" aria-label="Permalink to &quot;Fiber 结构&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FiberNode</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">tag</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WorkTag</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">pendingProps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mixed</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TypeOfMode</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 作为静态数据结构的属性</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">tag</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tag</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">elementType</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stateNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 用于连接其他Fiber节点形成Fiber树</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">child</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">sibling</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">ref</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">refCleanup</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 作为动态的工作单元的属性</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">pendingProps</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pendingProps</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">memoizedProps</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">updateQueue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">memoizedState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">dependencies</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">mode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Effects</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">flags</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NoFlags</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">subtreeFlags</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NoFlags</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">deletions</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 调度优先级相关</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">lanes</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NoLanes</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">childLanes</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NoLanes</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 指向该fiber在另一次更新时对应的fiber</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">alternate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>每个Fiber节点有个对应的 <strong>React element</strong>，多个 <strong>Fiber节点</strong> 依靠如下属性连接形成树</p><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 指向父级Fiber节点</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">return </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 指向子Fiber节点</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">child </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 指向右边第一个兄弟Fiber节点</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">sibling </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span></code></pre></div><h3 id="静态的数据结构" tabindex="-1">静态的数据结构 <a class="header-anchor" href="#静态的数据结构" aria-label="Permalink to &quot;静态的数据结构&quot;">​</a></h3><p>保存组件相关信息</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Fiber对应组件的类型 Function/Class/Host...</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">tag </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> tag</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// key属性</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">key </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> key</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 大部分情况同type，某些情况不同，比如FunctionComponent使用React.memo包裹</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">elementType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 对于 FunctionComponent，指函数本身，对于ClassComponent，指class，对于HostComponent，指DOM节点tagName</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">type </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Fiber对应的真实DOM节点</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stateNode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span></code></pre></div><hr><h2 id="fiber工作原理" tabindex="-1">Fiber工作原理 <a class="header-anchor" href="#fiber工作原理" aria-label="Permalink to &quot;Fiber工作原理&quot;">​</a></h2><p><strong>Fiber节点</strong> 可以保存对应的 <strong>DOM节点</strong>，<strong>Fiber节点</strong> 构成的 <strong>Fiber树</strong> 就对应 <strong>DOM树</strong></p><p><strong>DOM</strong> 更新使用到了 <strong><a href="https://baike.baidu.com/item/%E5%8F%8C%E7%BC%93%E5%86%B2/10953356" target="_blank" rel="noreferrer">双缓冲(在内存中构建并直接替换)</a></strong> 技术</p><h3 id="双缓冲" tabindex="-1">双缓冲 <a class="header-anchor" href="#双缓冲" aria-label="Permalink to &quot;双缓冲&quot;">​</a></h3><blockquote><p><strong>双缓冲</strong> 即在内存中创建一个与屏幕绘图区域一致的对象，先将图形绘制到内存中的这个对象上，再一次性将这个对象上的图形拷贝到屏幕上，这样能大大加快绘图的速度。</p></blockquote><p><strong>React</strong> 使用 <strong>双缓冲</strong> 来完成 <strong>Fiber树</strong> 的构建与替换——对应着 <strong>DOM树</strong> 的创建与更新</p><h3 id="双缓冲fiber树" tabindex="-1">双缓冲Fiber树 <a class="header-anchor" href="#双缓冲fiber树" aria-label="Permalink to &quot;双缓冲Fiber树&quot;">​</a></h3><p>在 <strong>React</strong> 中最多会同时存在两棵 <strong>Fiber树</strong>。<br> 当前屏幕上显示内容对应的 <strong>Fiber树</strong> 称为 <strong>current Fiber树</strong>，正在内存中构建的 <strong>Fiber树</strong> 称为 <strong>workInProgress Fiber树</strong>。</p><p><strong>current Fiber树</strong> 中的 <strong>Fiber节点</strong> 被称为 <strong>current fiber</strong>，<strong>workInProgress Fiber树</strong> 中的 <strong>Fiber节点</strong> 被称为 <strong>workInProgress fiber</strong>，他们通过 <strong>alternate</strong> 属性连接。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">currentFiber</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">alternate </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> workInProgressFiber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  workInProgressFiber</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">alternate </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> currentFiber</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>React应用的根节点通过使 <strong>current指针</strong> 在不同Fiber树的 <strong>rootFiber</strong> 间切换来完成 <strong>current Fiber树</strong> 指向的切换。</p><p>即当 <strong>workInProgress Fiber树</strong> 构建完成交给 <em>Renderer</em> 渲染在页面上后，应用根节点的 <strong>current指针</strong> 指向 <strong>workInProgress Fiber树</strong>，此时 <strong>workInProgress Fiber树</strong> 就变为 <strong>current Fiber树</strong>。</p><p>每次状态更新都会产生新的 <strong>workInProgress Fiber树</strong>，通过 <strong>current</strong> 与 <strong>workInProgress</strong> 的替换，完成 <strong>DOM更新</strong>。</p><blockquote><p><strong>workInProgress fiber</strong> 的创建可以复用 <strong>current Fiber</strong> 树对应的节点数据。（由diff算法决定是否复用）</p></blockquote>`,31),e=[p];function t(r,c,F,y,D,i){return a(),n("div",null,e)}const g=s(o,[["render",t]]);export{A as __pageData,g as default};
