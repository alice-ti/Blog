import{_ as t,c as a,o as r,af as l}from"./chunks/framework.BivmJ8bT.js";const m=JSON.parse('{"title":"图片加载方案","description":"","frontmatter":{},"headers":[],"relativePath":"program/project/07-图片加载.md","filePath":"program/project/07-图片加载.md","lastUpdated":1748588477000}'),o={name:"program/project/07-图片加载.md"};function i(_,e,p,n,s,c){return r(),a("div",null,e[0]||(e[0]=[l('<h1 id="图片加载方案" tabindex="-1">图片加载方案 <a class="header-anchor" href="#图片加载方案" aria-label="Permalink to &quot;图片加载方案&quot;">​</a></h1><p>前端加载超大图片时，一般可以采取以下措施实现加速：</p><ol><li>图片压缩：将图片进行压缩可以大幅减小图片的大小，从而缩短加载时间。压缩图片时需要注意保持图片质量，以免影响图片显示效果。</li><li>图片分割：将超大图片分割成多个小图块进行加载，可以避免一次性加载整个图片，从而加快加载速度。这种方式需要在前端实现图片拼接，需要确保拼接后的图片无缝衔接。</li><li>CDN 加速：使用 CDN（内容分发网络）可以将图片缓存在离用户更近的节点上，从而加速图片加载速度。如果需要加载的图片是静态资源，可以将其存储在 CDN 上，以便快速访问。</li><li>懒加载：懒加载是一种图片延迟加载的方式，即当用户浏览到需要加载的图片时才进行加载，可以有效避免一次性加载大量图片而导致页面加载速度缓慢。</li><li>WebP 格式：使用 WebP 格式可以将图片大小减小到 JPEG 和 PNG 的一半以下，从而加快图片加载速度。</li><li>HTTP/2：使用 HTTP/2 协议可以并行加载多个图片，从而加快页面加载速度。</li><li>预加载：预加载是在页面加载完毕后，提前加载下一步所需要的资源。在图片加载方面，可以在页面加载完毕后提前加载下一个需要显示的图片，以便用户快速浏览。</li></ol><hr><p><a href="https://juejin.cn/post/7212270321622106170" target="_blank" rel="noreferrer">前端加载超大图片实现秒开解决方案</a></p>',5)]))}const f=t(o,[["render",i]]);export{m as __pageData,f as default};
